{"name":"mixed","tagline":"minimalist, lightweight, ES3-compatible mixins","body":"# Synopsis\r\n\r\n**mixed** is a minimalist, lightweight, ES3-compatible function to mix Constructor functions and their prototypes into instance objects.\r\n\r\n[![browser support](https://ci.testling.com/pluma/mixed.png)](https://ci.testling.com/pluma/mixed)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/mixed.png?branch=master)](https://travis-ci.org/pluma/mixed) [![NPM version](https://badge.fury.io/js/mixed.png)](http://badge.fury.io/js/mixed)\r\n\r\n# Rationale\r\n\r\nThere are seem to be two common approaches to dealing with mixins:\r\n\r\n1. Mixins are special constructor functions that take an optional instance argument to augment an existing instance rather than the `this` context. This makes for very nice syntax, but requires the author to support mixing intentionally.\r\n\r\n2. Mixins are just collections of methods. In this case mixing is practically equivalent to the functionality already provided by [aug](https://github.com/jgallen23/aug) or jQuery's `$.extend` function.\r\n\r\nThe first approach (used by many libraries in [component](https://github.com/component/component)) provides a lot of power and flexibility, representing the same functionality mixins provide in class-based languages. However, the overhead of providing a mixin mechanism for each constructor individually seems obviously redundant.\r\n\r\nAdditionally, modifying the constructor's argument list to allow using it as a mixin seems both intrusive and limitting, as many constructors would normally expect to be passed a configuration object or initial parameters.\r\n\r\n**mixed** tries to solve this issue by both providing a standalone mixin function, to allow mixing any given constructor into any given object, and also providing a thin wrapper interface to turn any plain old argument-free constructor function into a component-style mixin that can be called either as a constructor (with the `new` keyword) or with an object to mix into (as the sole argument).\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install mixed\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/mixed.git\r\ncd mixed\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/mixed\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install mixed\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/mixed/master/dist/mixed.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/mixed/master/dist/mixed.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/mixed/master/dist/mixed.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/mixed.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `mixed` module available in the global namespace.\r\n\r\n# Basic `mixin` usage example\r\n\r\n```javascript\r\nfunction Liquor() {\r\n    this.alcoholContent = 0.8;\r\n}\r\nLiquor.prototype = {\r\n    burn: function() {\r\n        this.alcoholContent *= 0.5;\r\n        if (this.alcoholContent > 0.2) {\r\n            console.log('*FOOSH*');\r\n        } else {\r\n            console.log('*fizzle*');\r\n        }\r\n    }\r\n};\r\n\r\nvar cocktail = {};\r\nconsole.log(cocktail.alcoholContent); // undefined\r\nconsole.log(cocktail.burn); // undefined\r\n\r\nmixed.mixin(Liquor, cocktail);\r\nconsole.log(cocktail.alcoholContent); // 0.8\r\ncocktail.burn(); // *FOOSH*\r\nconsole.log(cocktail.alcoholContent); // 0.4\r\n```\r\n\r\n# Basic `mixable` usage example\r\n\r\n```javascript\r\nfunction Liquor() {\r\n    this.alcoholContent = 0.8;\r\n}\r\nLiquor.prototype = {\r\n    burn: function() {\r\n        this.alcoholContent *= 0.5;\r\n        if (this.alcoholContent > 0.2) {\r\n            console.log('*FOOSH*');\r\n        } else {\r\n            console.log('*fizzle*');\r\n        }\r\n    }\r\n};\r\nLiquor = mixed.mixable(Liquor);\r\n\r\nvar cocktail = {};\r\nconsole.log(cocktail.alcoholContent); // undefined\r\nconsole.log(cocktail.burn); // undefined\r\n\r\nLiquor(cocktail);\r\nconsole.log(cocktail.alcoholContent); // 0.8\r\ncocktail.burn(); // *FOOSH*\r\nconsole.log(cocktail.alcoholContent); // 0.4\r\n```\r\n\r\n# API\r\n\r\n## mixin(ctor:Function, obj, args…):Object\r\n\r\nApplies the given constructor to the given object and returns the object.\r\n\r\nCopies each of the constructor's prototype's properties to the given object, then calls the constructor as a function with the object as its context (`this`).\r\n\r\nAny additional arguments will be passed to the constructor function.\r\n\r\n**NOTE**: If you simply want to merge two instances rather than messing with constructors and prototypes, consider using [aug](https://github.com/jgallen23/aug) instead.\r\n\r\n## mixable(ctor:Function, args…):Function\r\n\r\nCreates a wrapper around the given constructor function that can be called either as a constructor (using the `new` keyword) or as a mixin (with the object to mix into as the sole argument). The constructor's prototype will be copied over to the wrapper function.\r\n\r\nIf called as a mixin, this wrapper behaves exactly as if `mixin` was called directly.\r\n\r\n# Acknowledgments\r\n\r\nThis library was influenced by [TJ Holowaychuk](https://github.com/visionmedia)'s work on [component](https://github.com/component/component).\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/mixed/blob/master/UNLICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}